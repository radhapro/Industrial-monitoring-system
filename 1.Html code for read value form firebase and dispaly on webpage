 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32 Sensor Monitoring</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #2c3e50;
            color: #ecf0f1;
        }

        h1 {
            text-align: center;
            padding: 20px;
            background-color: #34495e;
            color: #ecf0f1;
            margin: 0;
            font-size: 36px;
        }

        .container {
            max-width: 1200px;
            margin: 30px auto;
            background: #34495e;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        h2 {
            font-size: 24px;
            margin-bottom: 15px;
            color: #ecf0f1;
        }

        .sensorData {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .sensorData p {
            background-color: #16a085;
            padding: 15px;
            border-radius: 10px;
            font-size: 18px;
            margin: 0;
            text-align: center;
        }

        .sensorData p span {
            font-weight: bold;
            color: #ecf0f1;
        }

        .chart-container {
            margin-top: 30px;
            background: #34495e;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        canvas {
            width: 100% !important;
            height: 400px !important;
        }

        .alert {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #e74c3c;
            padding: 20px 30px;
            border-radius: 10px;
            font-size: 18px;
            color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: none;
            z-index: 1000;
        }

        .alert button {
            background-color: #c0392b;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-top: 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        .alert button:hover {
            background-color: #a93226;
        }
    </style>
</head>
<body>

    <h1>ESP32 Sensor Monitoring System</h1>

    <div class="container">
        <h2>Real-Time Sensor Data</h2>
        <div class="sensorData">
            <p>Temperature: <span id="temperature">-</span> Â°C</p>
            <p>Humidity: <span id="humidity">-</span> %</p>
            <p>Voltage: <span id="voltage">-</span> V</p>
            <p>Current: <span id="current">-</span> A</p>
            <p>Power: <span id="power">-</span> W</p>
            <p>Power Factor: <span id="powerFactor">-</span></p>
            <p>Frequency: <span id="frequency">-</span> Hz</p>
        </div>
    </div>

    <div class="chart-container">
        <h2>Sensor Data Graphs</h2>
        <canvas id="sensorChart"></canvas>
    </div>

    <div class="alert" id="alertBox">
        <p id="alertMessage">Alert: Sensor value exceeded threshold!</p>
        <button onclick="closeAlert()">Close</button>
    </div>

    <script>
        const databaseUrl = "https://evchargingsystem-58f08-default-rtdb.firebaseio.com/";

        const ctx = document.getElementById('sensorChart').getContext('2d');
        const sensorChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Temperature (\u00b0C)',
                        data: [],
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Humidity (%)',
                        data: [],
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Voltage (V)',
                        data: [],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Current (A)',
                        data: [],
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Power (W)',
                        data: [],
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Power Factor',
                        data: [],
                        borderColor: 'rgba(255, 205, 86, 1)',
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Frequency (Hz)',
                        data: [],
                        borderColor: 'rgba(75, 0, 130, 1)',
                        borderWidth: 2,
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        function fetchData() {
            fetch(databaseUrl + "/sensor/temperature.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("temperature").textContent = data || "N/A";
                    updateChart(data, 'temperature');
                    checkAlerts(data, 'temperature');
                });

            fetch(databaseUrl + "/sensor/humidity.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("humidity").textContent = data || "N/A";
                    updateChart(data, 'humidity');
                    checkAlerts(data, 'humidity');
                });

            fetch(databaseUrl + "/sensor/current.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("current").textContent = data || "N/A";
                    updateChart(data, 'current');
                });

            fetch(databaseUrl + "/sensor/power.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("power").textContent = data || "N/A";
                    updateChart(data, 'power');
                });

            fetch(databaseUrl + "/sensor/powerFactor.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("powerFactor").textContent = data || "N/A";
                    updateChart(data, 'powerFactor');
                });

            fetch(databaseUrl + "/sensor/frequency.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("frequency").textContent = data || "N/A";
                    updateChart(data, 'frequency');
                });

            fetch(databaseUrl + "/sensor/voltage.json")
                .then(response => response.json())
                .then(data => {
                    document.getElementById("voltage").textContent = data || "N/A";
                    updateChart(data, 'voltage');
                });
        }

        function updateChart(data, sensor) {
            let time = new Date().toLocaleTimeString();
            if (!sensorChart.data.labels.includes(time)) {
                sensorChart.data.labels.push(time);
            }

            switch(sensor) {
                case 'temperature':
                    sensorChart.data.datasets[0].data.push(data);
                    break;
                case 'humidity':
                    sensorChart.data.datasets[1].data.push(data);
                    break;
                case 'voltage':
                    sensorChart.data.datasets[2].data.push(data);
                    break;
                case 'current':
                    sensorChart.data.datasets[3].data.push(data);
                    break;
                case 'power':
                    sensorChart.data.datasets[4].data.push(data);
                    break;
                case 'powerFactor':
                    sensorChart.data.datasets[5].data.push(data);
                    break;
                case 'frequency':
                    sensorChart.data.datasets[6].data.push(data);
                    break;
            }

            if (sensorChart.data.labels.length > 10) {
                sensorChart.data.labels.shift();
                for (let i = 0; i < sensorChart.data.datasets.length; i++) {
                    sensorChart.data.datasets[i].data.shift();
                }
            }

            sensorChart.update();
        }

        function checkAlerts(value, sensor) {
            if (sensor === 'temperature' && value > 40) {
                showAlert("Temperature is too high!");
            }
            if (sensor === 'humidity' && value > 90) {
                showAlert("Humidity is too high!");
            }
            if (sensor === 'voltage' && value < 200) {
                showAlert("Voltage is too low!");
            }
        }

        function showAlert(message) {
            document.getElementById('alertMessage').textContent = message;
            document.getElementById('alertBox').style.display = 'block';
        }

        function closeAlert() {
            document.getElementById('alertBox').style.display = 'none';
        }

        setInterval(fetchData, 5000);
    </script>
</body>
</html>
